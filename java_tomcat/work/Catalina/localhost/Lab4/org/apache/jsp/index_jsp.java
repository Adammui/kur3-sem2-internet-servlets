/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.60
 * Generated at: 2022-05-10 07:10:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.text.SimpleDateFormat;
import jspclass.Time;
import java.util.Calendar;
import java.io.BufferedWriter;
import java.io.FileWriter;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/afternoon.jsp", Long.valueOf(1652165876000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.io.BufferedWriter");
    _jspx_imports_classes.add("jspclass.Time");
    _jspx_imports_classes.add("java.io.FileWriter");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!%@ page import=\"org.apache.commons.lang3.time.DateUtils\" %>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta charset=\"UTF-8\" />\n");
      out.write("        <title>First JSP App</title>\n");
      out.write("        <style type=\"text/css\">\n");
      out.write("            TABLE {\n");
      out.write("             border-collapse: collapse;\n");
      out.write("             border: 4px solid black;\n");
      out.write("            }\n");
      out.write("            TD, TH {\n");
      out.write("             padding: 5px;\n");
      out.write("             border: 2px solid green;\n");
      out.write("            }\n");
      out.write("        </style>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        <p>Today ");
      out.print( new java.util.Date() );
      out.write("</p>\n");
      out.write("\n");
      out.write("        ");
 int h=(new Date()).getHours();
        if (h > 3 && h < 7) out.println("<h2>Good night</h2>");
        if (h > 6 && h < 12) out.println("<h2>Good morning</h2>");
        if (h > 11 && h < 17) out.println("<h2>Good afternoon</h2>");
        if (h > 16 && h < 24) out.println("<h2>Good evening</h2>");
        if (h > 23 || h < 4 ) out.println("<h2>Good night</h2>");
        
      out.write("\n");
      out.write("\n");
      out.write("        ");
Date dateNow = new Date();
      out.write("\n");
      out.write("        ");
SimpleDateFormat yy = new SimpleDateFormat("dd/MM/yyyy"); 
      out.write("\n");
      out.write("        ");
SimpleDateFormat u = new SimpleDateFormat("u' ('E') '"); 
      out.write("\n");
      out.write("        \n");
      out.write("        <table>\n");
      out.write("\n");
      out.write("            ");
 for (int i=0; i < 7; i++) { 
                Date dateNext = new Date(new Date().getTime() + 60*60*24*1000*i);
      out.write("\n");
      out.write("                <tr>\n");
      out.write("                    <td>");
 out.print(yy.format(dateNext)); 
      out.write("</td>\n");
      out.write("                    <td>");
 out.print(u.format(dateNext)); 
      out.write("</td>\n");
      out.write("                </tr>   \n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("            <!%Date dateNext = DateUtils.addDays(dateNow, 1);%> \n");
      out.write("            ");
Date dateNext = new Date(new Date().getTime() + 60*60*24*1000);
      out.write("\n");
      out.write("\n");
      out.write("        </table>\n");
      out.write("\n");
      out.write("\n");
      out.write("        <hr>\n");
      out.write("        <a href=\"Jjj\">GET (Jjj) </a> <br/> <br/>\n");
      out.write("        <form action=\"Jjj\" method=\"POST\">\n");
      out.write("          <input type=\"submit\" name=\"press\" value=\"POST (Jjj)\"> \n");
      out.write("        </form>\n");
      out.write("\n");
      out.write("\n");
      out.write("        <hr>\n");
      out.write("    ");
// это директива и стандартные действия jsp
      out.write("\n");
      out.write("        ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <title>Afternoon</title>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        ");

            BufferedWriter writer = new BufferedWriter(new FileWriter("E:\\tools\\32awrew\\Internet_Smelov\\Lab4\\logs\\stdout.txt"));
            writer.append("Afternoon");
            writer.append("\n");
            writer.close();
        
      out.write("\n");
      out.write("        <h1>Afternoon</h1>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "afternoon.jsp", out, false);
      out.write("\n");
      out.write("        ");
      out.write("\n");
      out.write("        <hr>\n");
      out.write("\n");
      out.write("\n");
      out.write("        <a href=\"/Lab4/Afternoon\">Afternoon servlet</a>\n");
      out.write("\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
